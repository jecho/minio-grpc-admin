// Code generated by go-bindata.
// sources:
// api/minio-grpc-admin-spec/api/minioadmin/v1/api.proto
// api/minio-grpc-admin-spec/api/minioadmin/v1/proto.lock
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _minioadminV1ApiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x5f\x73\xdb\xb8\x11\x7f\xd7\xa7\xd8\xd1\xd3\xe5\x21\x62\x64\x27\x4e\xcf\x1a\xcd\x34\xd7\x5c\xdb\x4c\x2f\x3d\x4f\xed\xa6\x8f\x1c\x18\x5c\x91\x38\x91\x00\x0e\x58\xca\xa7\xdc\xf8\xbb\x77\x00\xf0\x0f\x40\x52\x49\xee\xa1\xe5\x83\x49\x61\x7f\xbb\xd8\xfd\xed\x62\x01\xd8\x9e\x25\xb1\xdf\x60\x0f\x6b\x6d\x14\xa9\xeb\xf5\x6e\xb5\xd2\x8c\x1f\x59\x89\x70\xda\xee\x56\x2b\xd1\x68\x65\x08\xd6\xa5\x52\x65\x8d\x19\xd3\x22\x63\x52\x2a\x62\x24\x94\xb4\x1b\xaf\xb5\xde\x0d\x30\xff\x9b\xbf\x2c\x51\xbe\xb4\x4f\xac\x2c\xd1\x64\x4a\x7b\xe8\xa2\xda\x2a\x08\xa1\x54\x79\x3f\xeb\x1e\xd6\x9b\xdd\x69\x1b\x09\xbf\x2b\x8d\xe6\x9b\x92\x11\x3e\xb1\x73\x50\xe5\x79\x89\x32\xef\x66\xd8\x74\x33\x6c\x94\x46\xc9\xb4\x38\x5d\xf5\x92\x17\xb0\x87\xdf\x57\x00\x00\x42\x1e\xd4\x6d\xf7\xed\x1e\x12\x54\xe3\x2d\xac\x3f\x0a\x29\x14\xbc\x2b\x1a\x21\x85\x25\xc3\x48\x9c\x10\xde\xdd\x7d\x58\xef\x06\xe8\x09\x8d\x15\x4a\xde\xc2\xfa\xf4\x6a\xb3\xdd\xbc\x8a\x44\x5c\x49\x62\x9c\x62\xc3\xee\x91\xac\x09\xb6\x79\xc5\xb0\x86\x4f\x28\xf1\xb3\x60\x91\x9e\x7b\x5a\x53\xdf\xc2\xba\x22\xd2\xf6\x36\xcb\x4a\x41\x55\xfb\xb8\xe1\xaa\xc9\x4e\x8b\x70\x6c\x98\x70\x0a\x4d\x27\xfe\x73\xe9\x06\x9c\x42\x04\x7c\x0e\x9f\xdd\x0b\x7f\x23\x34\x92\xd5\x79\xa1\xb8\x8d\x7d\xfc\xda\xd4\x99\x63\x43\xbd\x64\x8e\x95\x97\x56\x23\x8f\xa6\x28\xd0\x72\x23\x3c\xe1\x2e\x44\x65\x10\xd8\xa3\x6a\x09\xe6\x4c\x2a\x19\x31\xd9\xf9\x64\x91\xb7\x46\xd0\x39\x76\xa7\x1f\xcb\x0d\xfe\xda\x0a\x83\x0d\xca\x19\xa5\x47\x3c\xdf\xc2\x9a\xb5\x54\xa1\x24\xc1\xbd\xf5\x09\x43\x27\x56\xb7\x38\xd5\xf3\xf6\xb9\xd2\x2e\x1f\xae\x3c\x44\x31\xd1\x8a\x01\x9e\xe3\x89\xfc\x79\x95\x7e\xf5\x71\xf0\x0a\x1b\xb4\xb7\xf0\xf7\x87\x87\xbb\x85\xa1\xfb\x30\xc6\x95\xb4\xad\x1f\x5c\x33\xad\xeb\xce\xf1\xec\x17\x3b\x78\xaf\x8d\x2a\x5a\x7e\x09\xf1\xbc\x5b\xad\x2c\x9a\x93\xe0\x08\x3e\x29\x3e\x27\x5d\x8c\x59\x06\xff\x11\x75\x0d\x06\xa9\x35\xb2\xaf\x53\x5f\xea\xa6\x09\xfc\x87\xd4\x30\x2d\xc0\x59\x41\xe3\xf5\x8c\xe6\xf0\x37\xa4\x4f\x01\xff\x21\x82\x7f\x37\x0e\x7f\xb4\xe5\x8b\xce\xb2\x8d\xc7\xff\x85\xba\x3e\xbf\x88\x58\x1e\x16\xa9\x6f\x10\x1b\xa6\xc5\xc6\x55\xd6\xb8\xf4\xfa\xa7\x44\x82\x5b\x58\xfb\x16\x32\xc6\x92\x9d\xb6\x59\xe7\xf9\x7a\x56\xc7\xb1\xbb\xf7\x3e\x80\xa9\xb7\xb3\xd1\x99\xdf\x33\xc4\xff\x22\x82\xc0\xee\x42\x00\xcf\xab\x55\x83\xd6\xba\xc6\x76\xc1\xdb\x6e\x8e\x1f\x65\xa1\x95\x90\x04\xd8\x7f\xec\x61\xbb\xfb\x9a\xbe\x8f\xa5\xb3\x60\xc9\x08\x59\x42\xa3\x0a\x0c\xba\x9e\x3c\xd4\xc8\x08\x8b\x5e\x5a\xa8\x86\x09\x09\x7b\xb8\xda\xc5\x4a\x06\x4b\x47\xc1\x1e\xae\x97\xd5\xec\xaf\x36\x67\xc6\x01\x5e\x27\x7a\x05\xea\x5a\x9d\xdd\x82\xcd\x45\x01\x7b\x78\x13\xa4\x3f\xb4\xfc\x88\x64\xe1\xb1\x7b\xef\xe1\x26\x08\x7e\x7e\xfc\x05\x39\x59\x50\xdd\x7b\x0f\x6f\x83\xe0\xdf\x3e\xc4\xd6\x86\x1d\xe0\x4f\x61\xf0\x3e\x54\xbe\x05\xdb\x7f\xec\xe1\xfb\x20\x52\x12\xd5\x01\x1e\x19\x3f\xa2\x2c\xa2\x34\xfd\xf5\xfe\x87\x30\xf6\x70\xd6\x08\x07\x9b\xf7\x90\x3d\x6c\x5f\x8d\x2b\xfb\x47\xc3\x6c\x6b\x30\xc6\x62\x18\x8a\x15\xb6\x49\x19\xf6\x94\x84\x24\xdc\x19\xa5\xd1\x90\xe8\xbc\x43\xe3\x9c\xdb\x5e\xed\x56\x1e\xdc\xe7\xac\x27\x22\xea\xbd\x42\xd2\xcd\x6b\xe0\xaa\xed\x53\x1c\xa6\x48\xd4\x7a\x9a\xfe\xa0\x5a\x20\x71\xa6\x64\xc5\x67\xbc\xa8\x33\x70\x3c\xaa\x7d\x62\x6d\x4d\x70\xf2\x7f\x07\x35\xf7\xfc\xf4\xfe\xdd\x1d\xd4\x05\xd3\x63\xfd\x24\xcc\xfc\xa4\xdc\xa6\x0b\xb5\x7f\xd9\xb1\x9a\x12\xd0\xbb\xb6\x10\x04\xcc\xfd\xb5\x63\x3d\x25\x90\x7f\x2a\x12\x87\xae\x13\x5a\x90\xc9\x2f\x5f\x63\x83\x4a\x1f\x45\x70\x39\x5d\xad\x7d\xe9\x12\xa3\xd6\xa6\x81\x44\x62\x94\xdc\x9c\x35\xa5\x11\x25\x15\xde\xcb\xa3\x60\x9e\xe7\x1e\x78\x6e\xbe\xd9\x81\x25\x03\x81\xbc\xd4\xc4\x84\xda\x8f\x4c\x77\xec\xe6\x8d\xcf\xc2\x36\xe2\x62\x6e\xcc\xc1\x17\xb6\xc3\xe0\xd6\x11\xcf\x73\x52\x96\xdc\xbe\xba\xbc\x21\xce\x82\x08\xc9\xbd\x10\x83\x17\x3a\x9f\x7c\xf2\xbf\x12\xc1\x00\xfe\xff\x06\x90\x96\xde\x85\x40\x62\x90\x73\x31\xae\xd0\xaf\x84\x35\x55\xfd\xe3\xd1\x0d\x5e\x3c\x30\x53\x22\x7d\x78\x7f\x1f\xe2\x24\xff\x33\x17\x45\x1e\x07\x3e\x53\xef\x1d\x99\x68\xcf\xfd\xf8\xc2\x5c\xce\xf1\xe9\x74\x17\xe2\xfe\xf2\xb4\xcb\x0c\x7c\x2b\x13\x13\xdc\xa5\x7c\xf7\xcf\xf3\x6c\xf4\xf9\xcb\x27\xbd\xb4\x51\xa6\x3b\x4b\x74\x7a\x0d\xb3\x77\xdb\x46\x4e\x4e\x7a\xa9\xd9\x2e\x6c\x3b\xdf\x68\x08\xfc\x1d\x86\xae\xaf\x40\xc9\x5a\x48\xcc\x0b\x61\x8f\x93\x60\x3b\xf9\xe1\x90\x00\xae\xa7\x00\x4b\x4c\x16\xcc\x14\xb9\xe5\x79\xc1\x88\xa5\x4d\x78\x8e\xd1\xcc\x1d\xce\xc7\xcd\x7d\x44\x19\x33\x9a\xb8\x59\x14\x0e\xba\x6f\x2f\x6e\x3e\xc9\x56\x3a\x63\xc3\x25\x75\x42\xc3\xd0\xb8\x87\x73\x52\xca\xc1\xcd\x6b\x68\x35\x89\x06\xd3\xe0\x3b\xb5\xfe\x94\x9c\x04\xdd\xc9\xb8\x6a\x1a\x91\x9e\x64\x20\x59\xf7\x48\x4f\xca\x1c\x41\x76\xef\x24\xea\x01\xf5\x5e\xd8\x23\xf4\xec\xbf\x5d\xd8\xac\x7a\x33\x8b\xbb\x85\xbb\x3b\x5e\xdc\xac\xfc\x15\x27\x0d\x78\xa1\x87\x79\x07\x16\x8d\xa7\x67\xcb\x18\xf0\xa8\x54\x0d\x46\x29\xf2\x75\x73\x79\x37\x34\xe2\x84\xb9\x66\x54\xa5\xe4\x0e\x26\x2a\x64\xb5\x03\x26\xf4\x2e\xe4\xf3\xcd\xa2\xb4\x6d\x3d\xf7\x37\x8b\x42\x77\xb0\xad\xc7\x52\xea\x9f\xee\x90\x43\x8a\x58\x9d\x5b\xcd\x78\x74\x80\x9c\x60\x5a\x8b\xc5\x00\xf9\x7e\x11\xc2\x4e\x4c\xd4\xec\xb1\xc6\x01\x17\x1f\x1b\xdd\x73\xa8\x15\x23\x30\xc8\x8a\x9c\x2a\xa3\xda\xb2\xd2\x2d\x45\xa7\xc5\x14\xf7\x64\x04\xe1\x04\x78\x75\xd1\x60\xcd\x08\x25\xf7\xed\xee\xfa\xb2\xb5\x08\xf5\x7a\x09\xd5\x92\xa8\xc5\xe7\x70\x47\xda\xc3\xf6\xcd\x6e\xd6\xd8\xd2\x5b\xc5\x78\xe3\x83\xdf\x63\xd1\x70\x25\x49\xee\x17\xf3\x1a\xea\x04\x8c\x73\xb4\x36\x3f\xe2\x39\xac\xa0\xf4\x86\x61\x91\x1b\xa4\x7c\x04\x8d\x05\xe4\x0b\xc7\xda\x3a\x14\xcd\xa2\x6f\xf1\x3d\x27\xcb\xe0\xc3\x01\x5c\xcb\x08\x21\x3e\x31\x0b\x3f\xff\x63\xb4\xa4\x8e\xd1\x3e\x34\x1c\x10\xe7\x97\xdd\x71\x85\x64\x19\x3c\x54\x08\xc4\x4a\x50\x12\xa8\x42\x28\x85\xcb\x88\x56\x56\x90\x32\xe7\x69\x9f\x28\x05\xe5\x63\x1f\x89\xf2\xde\x19\xaa\x98\xad\x40\x1d\x06\x4b\xa1\xaf\x2c\x59\x09\x92\x74\xb9\xb9\x6b\x7d\x85\x54\xa1\x01\x65\xdc\xd9\xc2\xdb\x21\x83\xe8\x43\xe5\x35\x32\x09\x4f\x15\x4a\x78\x6c\x45\xbd\x68\xd6\x81\xf3\x7e\xa9\x5d\x27\xa6\xdf\xbb\x41\x77\x75\x6a\x45\x5d\xcc\xf6\x1e\x37\xe8\x3a\x3a\xa6\x0b\x38\xcb\x7a\x02\x9d\x6a\xa9\xfc\x4a\x02\x52\x2e\x32\x2d\x6a\x9c\xf9\xa0\x22\x7e\xde\x24\x76\xfe\x12\x34\x8c\x37\xb1\xd0\x80\x83\x30\xe9\x01\x59\x06\x77\x35\x23\x97\x39\x10\x14\x48\x08\xc0\x02\x0e\xca\x40\x06\xa6\x95\xd2\xe9\x2b\x39\xb5\xa8\x7b\xc5\xe9\x16\x14\x85\x14\x15\x85\x17\x2d\xd4\x4a\x17\x4d\x1e\xff\x6f\xc5\x27\xed\x79\xb5\xfa\x6f\x00\x00\x00\xff\xff\xa1\xbe\xfb\x04\x43\x15\x00\x00")

func minioadminV1ApiProtoBytes() ([]byte, error) {
	return bindataRead(
		_minioadminV1ApiProto,
		"minioadmin/v1/api.proto",
	)
}

func minioadminV1ApiProto() (*asset, error) {
	bytes, err := minioadminV1ApiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "minioadmin/v1/api.proto", size: 5443, mode: os.FileMode(420), modTime: time.Unix(1603333315, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _minioadminV1ProtoLock = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\x10\x3c\x6d\x81\x44\xda\x6c\x5f\x80\x7b\xe9\x9e\xda\x3d\x04\x58\xb4\x8b\xbd\x14\x81\xc0\x50\x63\x7a\x1a\x89\x64\x49\x4a\x69\x1a\xe4\xbf\x17\x7a\xd9\x92\x4c\x4a\x72\xfd\xa8\x0f\xde\x8d\x38\x9c\xef\x9b\xf7\xc8\xaf\x2b\x42\x68\x0a\x1b\x94\xe8\x50\x49\x4b\xd7\xe4\x8f\x15\x21\x84\xbc\xd6\xdf\x84\x50\x6d\x94\x53\x9a\xb9\x2d\x5d\x13\xca\x34\x46\xf5\x03\x7a\xd3\x9d\xa7\xb0\xa1\xeb\x9d\x38\x21\x34\x07\x6b\x99\x80\xbd\xaa\xe6\xf3\xda\xfb\x3f\x21\x54\xb2\x1c\x2a\x8d\xbf\x80\xfb\x0a\xc6\xa2\x92\xf7\x56\xd0\x9e\xcc\xdb\xcd\x31\x97\x7f\x03\x9d\xbd\xd0\x9b\xa1\xd8\x06\x21\x4b\xc7\x3c\x0e\xd5\xd5\xb2\x98\xd2\x35\xb9\xbb\x39\x3c\xe8\xb0\xd4\x13\xf5\x9c\xba\x17\x5d\x9f\x3e\x2a\x95\xd1\xd1\xf1\xdb\x58\x3e\x04\xfb\x61\x02\xb6\x6c\xec\x4b\x50\x6e\x94\xc9\x59\x15\xa4\x29\x1e\xad\x3b\x3e\xf5\xa4\xc7\xac\x06\x7f\x3f\x8c\x5c\x16\x08\x5e\x80\x7d\x47\xd2\x83\xea\xe1\x18\x0c\x87\x5f\x3b\x99\x0a\xcb\x00\x5e\xa0\x4b\x5a\x3f\x79\x70\x49\xdf\x3f\xd6\x19\x94\x62\xec\x13\xe2\x8b\xd6\x1c\x2b\x4f\xd4\x0e\x58\x71\x95\xe7\xe8\xae\x48\xea\xdb\x05\xa4\x9c\x01\x48\xac\x63\x0e\xae\x48\xec\xbb\x19\x62\x8f\x05\x66\x69\x92\x5e\x97\xd4\xf7\x73\xde\x52\xff\x43\x5e\xfd\x30\x43\x8a\xab\x5c\x63\x06\xe6\x8a\x94\x7e\x9c\xa1\xa4\x33\xe6\xaa\xd2\x3f\x81\xd2\xc1\xb3\x87\xe9\xbe\xb5\xf2\x9d\xf4\xba\x19\xb5\x60\x4a\xe4\x4b\xc7\x50\x8e\x12\x15\x4b\x73\x1c\x47\x9a\x1a\xcd\x8f\xec\x86\xfb\xa9\x34\xd3\x10\x51\x26\x9d\x67\x86\x63\xd0\x23\xab\x0a\xe7\x11\xf6\x8d\xbd\x46\x5c\x0f\xc7\xf9\x1c\xf9\x81\x01\xef\x84\x52\x22\x83\xa8\x9a\xf6\x5b\xe7\xf4\x37\xa1\xb8\x32\x21\x0c\x08\xe6\x20\x0d\x00\x85\xc1\x06\x80\x02\x42\x3d\xb2\x16\x2b\x59\x56\xd4\x72\x31\xd3\x18\xef\x43\x15\x97\x77\x71\x57\x9f\x81\xdb\x87\x79\x45\x3c\xb9\xe5\x97\x3c\x35\x03\x31\xd7\xca\xb8\x99\x04\xec\x36\xab\xc6\xe5\xb5\x81\x4c\x4a\xe5\xea\xa4\xb1\xed\xb2\xb5\x70\x2d\xea\x74\xd5\x97\xf8\xad\x00\x79\x6b\x9f\x99\x10\x60\xe2\x36\x1f\x66\x74\x7b\xcd\xd0\x8c\x3f\x31\x01\x83\x25\xaf\xbf\xa0\xdc\xed\x55\xf4\xc8\x05\x32\x30\x50\x7e\x42\x25\x1d\xcc\xa8\xfc\x76\xb1\x8f\x7e\xea\x23\x2d\xdb\x0f\xdf\x09\xa3\x79\x54\x25\xe8\x33\x7b\x69\xec\xe5\x89\x00\x99\xb4\x6e\x89\x5a\x92\x91\xd2\x20\x99\xc6\xf2\x43\x77\x32\x4e\xf9\xe9\x54\x9f\x68\x06\xd5\xde\xe6\x2b\xd0\xd9\xd2\x99\xa9\x51\x87\x2e\x0b\x8e\xca\x9d\xd3\xee\xab\x5a\x21\x1f\xab\x62\x41\xeb\x0c\x73\x58\x02\xf9\xf8\xf9\xd3\xa9\x53\x61\xb4\x9d\xce\xf2\x28\xdf\x47\x77\xd1\xfb\x73\xa1\x72\x25\x1d\xe3\xc1\xb5\xea\x5c\x5d\xa9\xfe\x77\x49\x5b\xba\x47\xbe\x65\x90\x91\xaf\x20\xe1\x1f\x64\xc1\x5e\x14\xd2\xb5\x80\x4b\x61\xb2\x45\x54\xaa\x76\x6d\xd7\x71\x2c\xd0\x6d\x8b\xc7\x88\xab\x3c\x2e\x2f\xc7\x0a\x72\x86\xcb\x78\xe5\x2d\x8b\x9f\x45\x75\xa5\xe2\x75\x95\x8e\xbd\xe0\x0d\x6c\x67\xcb\xdf\x0e\x8c\x64\x59\x92\x2a\x6e\x2f\x51\xb1\xe1\x10\x2e\x09\x5f\x33\xf6\x6e\xeb\xb9\x77\x6b\x35\xf0\x73\x15\x53\x0a\x96\x1b\xd4\x81\x1d\x65\x48\xef\x5e\x19\x20\xec\x51\x15\x8e\x1c\x76\x16\x25\x83\x9d\xe5\xac\x81\xb2\xc0\x0b\x83\xce\xbb\xf6\x9c\x1a\xa3\x4e\x77\x62\xe0\xaf\x02\x0d\xe4\x20\x2f\xde\x66\x9e\xc0\x67\xca\x4e\x6c\xe7\x7c\x56\xb8\x2d\x48\x87\xdc\xfb\x5a\xdf\x7d\x4e\x29\xe7\x06\x6a\x82\xcb\x22\x93\xa7\xc1\x06\x80\x96\x2b\x3d\x05\x48\x06\x0e\xa8\x86\x34\xa6\x21\xc3\xc9\x94\xf1\x17\xe3\xd4\x74\xc0\x29\x4a\xc1\x33\x5f\x4b\x0b\xdf\xb8\x7c\x03\xb4\x7c\x0b\x39\x78\x5b\xdf\xce\xdc\x5f\xbf\x7c\xf9\xfc\x5f\x7e\xe6\x3a\x16\xe3\xf7\x53\x40\xb8\x92\xb6\x98\x43\x61\x5a\x67\x6d\x29\xc5\x7f\x5a\xcf\xcf\x64\x47\x00\x6a\xa3\xd2\x82\x9f\x0a\xb8\xe4\xed\x62\xd5\x7f\x52\x7d\x3f\xac\xde\xfe\x0d\x00\x00\xff\xff\xad\xf7\x4f\xae\xc3\x15\x00\x00")

func minioadminV1ProtoLockBytes() ([]byte, error) {
	return bindataRead(
		_minioadminV1ProtoLock,
		"minioadmin/v1/proto.lock",
	)
}

func minioadminV1ProtoLock() (*asset, error) {
	bytes, err := minioadminV1ProtoLockBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "minioadmin/v1/proto.lock", size: 5571, mode: os.FileMode(420), modTime: time.Unix(1603133771, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"minioadmin/v1/api.proto": minioadminV1ApiProto,
	"minioadmin/v1/proto.lock": minioadminV1ProtoLock,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"minioadmin": &bintree{nil, map[string]*bintree{
		"v1": &bintree{nil, map[string]*bintree{
			"api.proto": &bintree{minioadminV1ApiProto, map[string]*bintree{}},
			"proto.lock": &bintree{minioadminV1ProtoLock, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
