// Code generated by go-bindata.
// sources:
// api/minio-grpc-admin-spec/api/minioadmin/v1/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _minioadminV1ApiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4d\x8f\xdc\x36\x0c\xbd\xfb\x57\x10\x3e\x65\x0f\x6b\x67\x93\x7e\x00\x1e\x0c\xd0\xa0\x05\xda\x45\x11\x74\xd1\x2e\x92\xa3\xa1\x95\x39\xb2\xba\xb6\xa8\x4a\xb4\x37\xd3\x60\xfe\x7b\x21\xd9\x9e\xd1\x78\x5d\x44\x97\xf1\x90\x7c\x8f\xe4\x23\x25\x7f\x34\x2c\xbe\xc0\x1e\x72\xeb\x88\xe9\x7d\xbe\xcb\x32\x2b\xe4\xb3\x50\x08\xe3\xdd\x2e\xcb\x74\x6f\xc9\x31\xe4\x8a\x48\x75\x58\x0a\xab\x4b\x61\x0c\xb1\x60\x4d\xc6\x17\x11\x95\xef\xce\x61\xf1\xbf\xbc\x55\x68\x6e\xfd\x8b\x50\x0a\x5d\x49\x36\x86\x6e\xc2\xb2\xc9\x09\x8a\xea\x25\xeb\x1e\xf2\x62\x37\xde\x25\xce\x37\xca\x59\x59\x28\xc1\xf8\x22\x8e\x13\x54\xd6\x0a\x4d\x3d\x67\x28\xe6\x0c\x05\x59\x34\xc2\xea\xf1\xdd\xe2\xb9\x81\x3d\x7c\xcd\x00\x00\xb4\x39\x50\x35\x7f\x87\xc3\x9a\x3b\xac\x20\xff\xa8\x8d\x26\xf8\xd0\xf4\xda\x68\xcf\x4e\xb0\x1e\x11\x3e\x3c\xdc\xe7\xbb\x73\xe8\x88\xce\x6b\x32\x15\xe4\xe3\xdb\xe2\xae\x78\x9b\xb8\x24\x19\x16\x92\x53\xe2\x70\x8c\xe8\x27\x6e\xd9\x0a\xec\xe0\x13\x1a\xfc\x57\x8b\x04\x17\xce\xe0\xba\x0a\xf2\x96\xd9\xfa\xaa\x2c\x95\xe6\x76\x78\x2a\x24\xf5\xe5\xb8\x19\x8e\xbd\xd0\x01\xd0\xcf\xee\x9f\x54\x30\x04\x40\x12\x78\x9a\x3e\xe7\x1f\xfc\xc2\xe8\x8c\xe8\xea\x86\xa4\x4f\x6b\xfc\x56\xea\x32\xa8\x41\xb7\x22\xa8\x72\xeb\x2d\xca\x24\x45\x83\x5e\x3a\x1d\x05\x0f\x2d\x92\x43\x10\x4f\x34\x30\xbc\x56\x92\x4c\xa2\xe4\x5c\x93\x47\x39\x38\xcd\xc7\xb4\x9c\xc5\x56\x3b\xfc\x67\xd0\x0e\x7b\x34\xaf\x24\x7d\xc6\x63\x05\xb9\x18\xb8\x45\xc3\x5a\x46\xf6\x95\x42\xa3\xe8\x06\x5c\xe3\x22\xbf\x24\x1b\xe6\x11\xd6\x43\x37\x2b\x54\x1a\x10\x35\x5e\xf9\x4f\xd9\xf5\xd7\xd2\x87\x6c\xb1\x47\x5f\xc1\x6f\x8f\x8f\x0f\x1b\xa6\xbf\x26\x9b\x24\xe3\x87\x68\xcc\x85\xb5\xdd\x5c\x78\xf9\xb7\x3f\x57\x6f\x1d\x35\x83\xfc\xbf\x88\xd3\x2e\xcb\x3c\xba\x51\x4b\x84\x38\x94\x38\x93\xb9\xc7\xb2\x84\xcf\xba\xeb\xc0\x21\x0f\xce\x2c\x7b\x1a\x57\xdd\xf5\x93\xfe\xd3\x68\x84\xd5\x10\x58\xd0\x45\x9c\xb3\x12\x7e\x45\xfe\x34\xc5\xdf\x27\xe1\x6f\x2e\xe6\x8f\x5e\xdd\xcc\xcc\x3e\xb5\xff\x89\xb6\x3b\xde\x24\x2a\x9f\x2f\x69\x7c\x20\x0a\x61\x75\x11\x36\xeb\x72\xf5\x96\xa3\x90\xa1\x82\x3c\x3e\x21\x97\x5e\xca\xf1\xae\x9c\x2b\xcf\x5f\xed\x71\x76\xca\xb2\x1e\xbd\x0f\xef\xc2\x55\x69\xf0\x75\xdb\x15\xab\xbb\xc8\x73\x7f\x00\xb2\x38\xef\xe2\x8b\xf0\xf0\xc7\xef\xd1\xf5\x44\xd4\x01\x3d\xc3\x1e\xc2\x13\x17\x2c\x0b\xd5\x86\x28\x97\x2e\xca\x12\x1e\x5b\x04\x16\x0a\xc8\x00\xb7\x08\x4a\x33\x38\xb4\xe4\x35\x93\x3b\x5e\x36\x9a\x9d\x36\x2a\x78\xeb\x65\x2a\x31\xd5\x8a\xa8\x15\xbe\x05\x3a\x9c\x99\x24\xf5\xbd\xe6\x2d\x96\xc9\x03\x7b\x78\x77\x45\xf2\xb9\x45\x6e\xd1\x01\x39\x30\xc4\x91\x87\x1d\x62\x6c\x55\x76\x28\x0c\xbc\xb4\x68\xe0\x69\xd0\xdd\x26\x6d\x08\xae\x3d\x0b\x0e\xcf\xee\xfb\x2b\xea\x5f\x82\x91\x0e\x11\xdb\xac\xb1\xd1\x58\x37\x13\xee\xbb\x2b\xdc\x2c\x60\x80\x2a\x82\xc1\x63\x03\x4c\xa1\x33\xab\x3b\x7c\x55\x03\x25\xfa\x7c\x7f\xc5\xf3\xf3\x84\x70\x91\x62\x8d\x93\x8b\x73\x0f\x3f\x5c\xa1\x1e\x3a\xc1\x61\x72\xa0\x79\x12\x61\x0a\x6c\xe0\x40\x0e\x4a\x70\x83\x31\x01\x4f\x66\xcd\x68\x17\xe0\x1e\x7e\x5c\x96\x2f\x5b\xb5\x94\x2c\x45\x74\x6d\xec\xca\xdc\x4d\x9d\xde\xc1\x38\xb4\x53\x96\xfd\x17\x00\x00\xff\xff\xe6\x16\xd3\x0c\x6b\x07\x00\x00")

func minioadminV1ApiProtoBytes() ([]byte, error) {
	return bindataRead(
		_minioadminV1ApiProto,
		"minioadmin/v1/api.proto",
	)
}

func minioadminV1ApiProto() (*asset, error) {
	bytes, err := minioadminV1ApiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "minioadmin/v1/api.proto", size: 1899, mode: os.FileMode(420), modTime: time.Unix(1602807159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"minioadmin/v1/api.proto": minioadminV1ApiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"minioadmin": &bintree{nil, map[string]*bintree{
		"v1": &bintree{nil, map[string]*bintree{
			"api.proto": &bintree{minioadminV1ApiProto, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
