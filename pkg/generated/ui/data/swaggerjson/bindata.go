// Code generated by go-bindata.
// sources:
// assets/generated/swagger/minioadmin/v1/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _minioadminV1ApiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5c\x5f\x73\xdb\xb6\xb2\x7f\xcf\xa7\xd8\xcb\x7b\x67\x62\xdf\xba\x94\xed\x76\xfa\xe0\x8e\x67\xea\x36\x49\xeb\x9e\xfc\xf1\x38\x76\xfa\x10\x7a\x64\x88\x5c\x8a\xa8\x41\x80\x01\x40\x39\x4c\xc7\xdf\xfd\xcc\x02\xa4\x44\x51\xa2\x6d\x49\xd6\x69\x33\xa7\x0f\x8d\x2d\x00\xbb\xbf\xdd\xfd\x61\xb1\x80\x00\xff\xf5\x0c\x20\x30\xb7\x6c\x3c\x46\x1d\x1c\x41\x70\x18\xee\x07\x7b\xf4\x19\x97\xa9\x0a\x8e\x80\xda\x01\x02\xcb\xad\x40\x6a\x7f\xc3\x25\x57\x70\x92\xe4\x5c\x72\x63\x35\xb3\x7c\x82\x70\x72\x76\xea\x06\x01\x04\x13\xd4\x86\x2b\x49\x5d\x27\xfb\xe1\x41\x2d\x0d\x20\x88\x95\xb4\x2c\xb6\x53\x91\x00\x81\x64\x79\x2d\x33\xce\x18\x0a\xf8\x80\x12\xbf\x70\x56\x8f\x00\x08\x4a\x2d\xa8\x3d\xb3\xb6\x30\x47\x83\xc1\x98\xdb\xac\x1c\x85\xb1\xca\x07\x93\x6e\x57\xcc\x19\x77\x9d\xf3\xba\xe9\xa7\x31\x7d\x42\x9d\x03\xd7\xe7\xee\x19\xc0\x9d\xb3\xcc\xc4\x19\xe6\x68\x82\x23\xf8\xe8\xa1\x91\xfc\x06\xa6\xd3\x45\x23\xae\x5c\xdf\x58\x49\x53\xce\x75\x66\x45\x21\x78\xcc\x2c\x57\x72\xf0\xa7\x51\x72\xd6\xb7\xd0\x2a\x29\xe3\x47\xf6\x65\x36\x33\x33\xf7\x0e\x58\xc1\x07\xe4\x52\xc5\xc8\xb3\x83\xc9\xc1\xc0\xa0\x9e\xb8\x90\x4c\xdd\x35\xc6\xb6\xf7\x00\x02\x55\xa0\x76\xc2\x4f\x13\x67\xf9\x74\xfc\xf0\x57\xb4\xef\xdd\xf8\x53\x99\x2a\x9d\xbb\x4e\x53\x5f\x01\x04\x1a\x4d\xa1\xa4\x41\x33\x27\x10\x20\x38\xdc\xdf\xef\x7c\x04\x10\x24\x68\x62\xcd\x0b\x5b\xc7\xf5\x04\x4c\x19\xc7\x68\x4c\x5a\x0a\x68\x24\x85\x2d\xf1\x6e\x90\xf3\x32\x5b\x10\x06\x10\xfc\x9f\xc6\x94\xe4\xfc\xef\x20\xc1\x94\x4b\x4e\x72\xcd\x60\x72\xb0\x0c\xf4\x39\x16\xa2\x0a\xe6\x24\xdc\xb5\x7e\xbb\x6b\x2b\x0d\x12\x4c\x59\x29\xec\xc3\x06\x48\x28\x25\x7e\x2e\x30\xb6\x98\x00\x6a\xad\xf4\xd4\x8e\x4d\xcd\xd0\xa5\xb4\x3c\xc7\x97\x24\xf4\x1e\xdc\xcf\x96\x58\x10\x14\x4c\xb3\x1c\x2d\xea\x19\x85\xfc\x7f\x1d\x73\x9a\x79\x83\x32\x29\x14\x97\x36\x6c\x7e\xe8\x82\xe7\xce\xdc\x4f\x25\xea\xaa\xdb\xa4\xf1\x53\xc9\x35\x12\x71\x52\x26\x0c\x76\x9a\x6d\x55\x38\x15\xc6\x6a\x2e\xc7\x41\x9f\xcb\x1f\x02\xc6\x1c\x4f\x86\x37\x58\x0d\x79\xf2\x8f\x43\x67\x30\xd6\x68\x87\x33\x90\xff\x3c\x84\x46\x3c\x3d\xa6\x91\x52\x02\x99\xec\x8e\xf6\x73\xae\xdd\x61\x29\x61\xaf\x5a\x84\xb5\x6c\xdc\xa5\x6a\x2b\x0b\xcd\xc6\x5f\x3d\x6b\x4b\xa9\x3d\xb0\x2c\xe9\xcd\x56\x8f\xfe\xac\x67\xca\x3c\x67\xba\x22\xa0\x7f\x70\x41\x19\xc8\x96\x5a\x42\x3d\x14\xf8\x2c\x79\x00\x1b\xa9\xd2\x02\x2b\x38\xd4\xd9\x74\xef\x91\xc9\xf3\x83\x17\xf6\x95\x65\xcf\x1a\xf5\x7f\x55\xce\x5c\x93\x82\xd3\x62\xa0\x85\x63\xb6\x1c\x9f\x94\x09\xb7\xee\x7f\x6f\x58\xd1\x26\x63\x33\x85\xd4\xe8\x4f\x8c\x67\xe9\x96\x96\xfe\x02\xb5\xe5\x1d\x4a\x04\x94\x53\x3a\x1c\xe9\xcb\x0c\x6d\xa3\x8c\x65\xb6\x5c\x60\x57\xef\xc8\xa5\xb3\xab\x77\x35\xfd\xb9\x8c\x6f\xd0\x9a\x4d\xcc\x8a\x55\x29\xbb\x94\xe9\xc2\x9b\x63\xd9\x2c\xb7\x94\x5c\xda\x1f\xbe\x5f\x1b\xfc\x4b\xcd\x4c\xa9\xf1\x67\x16\xdf\xa0\x4c\x2e\xbc\xca\xb5\xed\x18\x79\x31\x43\x3b\x2f\xe7\xd1\x71\x52\x52\x70\x89\xc3\x84\x9b\x9b\xde\x68\x71\x69\x71\x3c\x97\x7a\xe6\xfc\xc1\xa5\xfd\xee\xb0\x47\x7a\x9a\x6e\x53\xbc\xb1\x4c\x26\x4c\x27\x43\x13\x0f\x13\x66\xbb\xf3\xf5\x89\x35\x14\x4c\x73\xdb\x3b\x19\xd6\xd7\xa1\xf5\xd6\xe0\x3b\xd1\x4f\x8a\x7b\x35\xae\xbf\x7a\xff\x77\xd2\x7c\x35\xac\xef\x1c\x94\xaf\x34\xa9\xf8\x4f\xcf\x96\xe1\x5a\xd9\x0a\x4a\xdd\x6b\xe5\x92\x69\x0d\xbf\xc6\xd8\xb2\xa0\xf5\x73\x3d\xdf\x75\x5d\xd7\x12\xbb\x58\x8d\x3d\x1a\x51\xac\xf2\x9c\x5b\x2a\xfa\xd7\x18\x2c\xd1\xde\x2a\x7d\xd3\x37\x94\x69\xcd\xe6\x6b\xdf\x80\x5b\xcc\xbb\x29\xb2\xb7\xdc\xe8\x86\xfb\x6d\xad\xee\xc1\x5a\xe3\xde\x44\xfc\xd4\xa8\x5e\x70\xd3\x07\x69\x75\x76\xf3\x78\x33\x56\x4f\x96\xd4\x88\xf7\xd8\x41\xea\x3e\xb8\x21\x4b\xfd\x28\x92\xb9\xaa\xea\x11\xc2\x5e\xbf\x38\x39\xeb\x91\xa5\xc6\x63\xbf\x61\xde\x5a\x54\x1c\x00\xa7\xe6\x61\x8a\x30\x2a\x1a\xb7\x8e\xc6\x95\xa6\x0f\x83\x91\xca\xf2\xb4\x3e\x7f\xda\x3a\xa6\xb7\x73\xca\x9e\x82\xb8\x97\x86\x8d\x37\x5a\xf7\x0c\xff\xb2\x66\x52\x7c\xf4\x82\xd2\xde\x72\x2d\xd9\x34\x6e\x00\x7e\xcc\xed\xf0\x71\x09\x78\xce\x86\xe9\x41\xed\x45\x86\x60\xd9\x18\x94\x04\x9b\x21\x8c\xb9\x05\x8d\x85\x32\xdc\x2a\x5d\x2d\x9f\x4b\xa4\xd2\x27\xee\xb5\x35\x66\xcc\x64\xa0\xd2\xa9\xca\x5a\x5c\xaf\x3a\xab\x11\x87\x8f\x59\x33\x97\xab\xfc\x23\x43\x9b\xa1\x06\xa5\x41\x2a\xeb\xb4\x92\x44\xb8\x65\x06\x62\x81\x4c\xc2\x6d\x86\x12\x46\x25\xef\xcb\x45\xd4\x94\x50\x01\xb9\x1e\x80\x17\xcc\x22\xd9\xeb\xc4\xf4\x98\xa9\x36\x8a\x63\xcd\x2a\x52\x32\x56\x50\x1a\x4c\xc0\x2a\xf2\x6b\xc1\x05\xf6\x2e\xbe\xd4\xa8\xd7\xd2\xf7\x4b\x3d\xd8\xa9\x5a\x2e\xbf\x10\xcc\x12\xc7\xd7\x92\x7f\x56\x0f\x06\x6e\x7d\x98\xbc\xbe\x04\x52\xa5\x61\x00\xba\x94\x92\x4b\xa2\xed\x43\xb3\xcf\xa7\x64\xff\xff\xaf\x77\x9b\xde\x4e\x9b\x6f\x58\x71\xc1\xf4\x18\xed\xe9\x8b\xf7\x5d\xd1\x2b\xdb\x64\x9d\xa4\x21\x4f\x86\x1e\xe6\x30\x5f\x5c\x74\x9f\x6a\x0d\x98\x47\x3d\xff\x1b\x85\x66\x85\xd5\x60\x6e\x19\xe9\x38\xe7\x6f\x08\x71\xd7\x8b\xdb\xf2\xe0\xfd\x34\x58\xc1\x7f\x4b\xcb\xc8\x0d\xfc\xb6\xc9\xb6\x44\x2b\x65\xdd\xe9\x45\xdf\xe0\x65\x27\xd1\xf7\x9d\x43\xcf\x15\xe3\x9a\x4f\x70\x58\x30\x9b\xad\x03\x2d\x43\x26\xa8\x71\x0b\xc0\xd6\xde\x01\x96\xe5\x7a\xdb\xa5\x5c\x25\x28\xd6\x22\xb7\xb2\x4c\x0c\x4d\xc1\xe2\xa7\x2a\x93\xda\xd6\x18\x4c\xb6\x25\x9b\x4d\x18\x17\x6c\x24\x70\x5b\x0a\x34\xb2\x64\x68\x33\xad\xca\x71\x56\x94\xbd\xe4\x97\x65\x3e\xea\x3f\xfd\x49\x85\x62\x3d\x55\xc7\xad\xe6\x16\xb7\xa9\xc0\x19\x20\x98\x45\x19\xf7\xe6\xbd\x0d\xd1\x6f\x4b\x7a\x69\xb9\xe0\x5f\xba\xf5\xf3\x06\xb2\x1f\x95\x27\xdf\x2e\x9c\x39\xac\x9c\x2a\xeb\x6f\xef\x56\x9e\x86\x13\x26\xca\x0d\xcf\xe5\xe6\x37\x86\x1b\xd8\xe0\xf6\xaf\xdb\x2c\x15\xe6\xbf\x5a\x59\x71\x61\x9b\x1e\x05\x6c\x78\x40\xb7\x69\xd1\xd6\x39\x15\xd8\x00\x8d\x3f\xbe\xd8\xa6\xc3\xbb\x65\xf2\x1a\x2e\x7f\xdb\x73\x8e\xb0\xfa\x0c\x69\x09\xda\xa6\xcd\xf7\x16\x91\x6b\x38\xe0\x43\xe7\xf8\x6b\xdb\xa4\x9b\x3b\x16\x8e\x75\x55\xac\x55\x7e\x25\xb8\xda\xd0\xa5\x2e\x78\xa8\xb4\xff\x3a\x77\x5d\x85\x56\x56\x8d\xca\xf4\x44\x56\x1b\xed\xb1\xaa\x02\x87\xfe\x92\xda\xa3\x0b\x90\x85\xeb\x00\x97\xe7\xaf\x07\x1a\x8d\x2a\x75\x8c\x40\x6b\x08\xd8\x8c\x59\x28\x25\xff\x54\xa2\xa8\x80\x27\x28\x89\xc1\x68\xfc\xf9\x46\x55\x60\x73\xc2\x62\x50\x73\x26\xf8\x17\x4c\x22\xe9\x4c\x8a\x95\x80\x51\x99\xa6\xa8\x21\x47\x63\xd8\x18\x43\xb8\xc8\xb8\x01\x8f\x04\xf2\xd2\x58\x70\x37\xf1\xb8\x04\x66\x41\x20\x33\x36\x92\x4a\x22\x44\xc1\x20\x0a\x20\xce\x98\x66\xb1\x45\x4d\xe3\x10\x04\x33\x16\x0c\x8e\x73\x94\xb6\x51\x7a\x79\xfe\xfa\xb9\x01\x2a\xbc\xbd\x38\x8d\x85\x46\x83\xd2\x46\x92\x9a\xd3\x52\x88\x0a\x3e\x95\x4c\x10\xe6\xc4\x5b\x54\x0f\x75\xd8\x77\x98\x01\x2e\x23\x79\x4d\x22\x06\x63\xa5\xc6\x02\xc3\x26\x20\xe1\x8b\xd2\xdf\xca\xb8\xde\xf5\x08\xdc\x70\x93\xa9\x52\x24\x30\x42\x20\xd8\x10\x33\xa9\x24\x8f\x99\x00\x5a\xf4\x23\xb9\x83\xe1\x38\xdc\x23\x63\x12\x32\x32\x0a\xc2\x28\x00\x6e\xdc\x91\x10\x8b\x63\x2c\x2c\x26\xbb\x61\x24\x23\x79\x2a\xa1\x20\xfb\x78\x8c\x7b\x60\x91\xe5\x06\x4a\x53\x32\x42\x5c\x68\xac\x8f\x22\x80\x4b\xab\x1c\xde\x11\x97\x4c\x57\xc0\x84\x70\xd0\x8d\x8f\x8c\xcd\xb0\x8a\xea\xbb\x10\xc0\x2d\x58\x77\x2c\x43\xd0\x68\x0c\x79\x17\x3f\x3b\x6f\x9d\xc8\x2a\x84\xdf\xd4\x2d\x4e\x50\xef\xb9\xf3\x8d\xcb\xf3\xd7\x06\x6e\x33\x1e\x67\x6e\x88\xcd\x30\x92\xfe\x3a\x22\x5c\x67\xd6\x16\xd7\x7b\xfe\x5f\x73\xbd\xe7\xcf\xb4\xc0\xb7\xee\x01\x85\x28\x66\x12\x94\x63\x8e\x43\x6c\xd0\x42\x59\x00\x73\xd8\x22\xe9\xaf\xb8\x78\x88\x39\x2b\x8c\xf7\xb6\xd3\x68\x55\x43\x07\x68\xa5\x49\x60\x06\x52\x25\x84\xba\x35\x47\xe4\x9c\xff\x87\xd3\x74\xa6\x92\x1c\x58\x68\x35\xe1\x09\x26\x53\x54\xf4\x21\x33\xa6\xcc\x31\x09\x69\xc0\x89\x84\xdf\x2e\x2e\xce\xe0\xd7\x97\x17\xcd\x41\xe3\xe5\xf9\x6b\xcf\x8b\x8a\xa3\x48\x80\xc1\xc7\x6e\x88\x2f\xaa\x02\xaf\x3e\x5e\x45\x12\xc0\x95\x3e\xe4\xb9\xda\xd3\xbe\x88\x73\xb6\xd7\xb7\x29\x81\x49\x7f\xdb\xc4\xeb\x9b\x5d\xa8\x34\xc0\x34\x52\x68\xd4\x6d\x7d\x24\xc6\x62\x62\xac\x52\x37\x65\x01\x1a\x4d\x29\xac\x81\x11\x33\x98\xd4\xd0\x48\xe1\xe5\xf9\x6b\x27\x3d\x63\x13\xe7\xfe\xbc\x15\xf7\xc4\x07\x9e\x35\x60\xe8\xe7\x89\xe2\x09\x30\x59\xd1\x58\x2f\xda\xd1\x52\x63\xaa\x34\xee\x35\x3d\x49\x00\xb3\x7c\xc4\x05\xb7\x15\x48\xc4\xc4\xf9\x7c\x84\xe0\xa6\x86\x9e\xd0\x04\x05\x82\x11\x67\x4c\x8e\xd1\xb5\x3a\x46\x85\xb0\x73\x69\xb0\xb9\xbc\x44\x86\x50\xd0\x88\xf4\x3e\x6a\x4c\xb2\xb1\x03\x3e\xd2\xc8\x6e\x88\xdd\xb5\x84\x70\x97\x42\xf6\x56\x59\x3c\x02\x4b\x33\x3c\x2d\x65\xec\xa9\x41\x18\x6a\xf6\xc7\xa5\xd6\x28\xad\xa8\x60\xba\x65\x6a\x78\xaa\xd2\x94\xc7\x9c\x89\x3a\x73\x8c\xca\x14\x34\x52\x3e\xc0\x3d\x60\x32\x21\x62\xd7\x42\xdc\x99\x23\xb1\x77\x46\xa8\x11\x8e\xb9\x3f\xa7\xbb\xe5\x36\x8b\x24\xb5\x84\x3e\xce\xac\xe0\x26\x8c\x55\xee\xe6\xdb\x7b\x7f\xd5\x16\x94\x3b\xa5\xb5\x19\x93\x5d\x9e\xc3\x0e\x09\xce\x10\x30\x2f\x6c\x55\x73\x6f\x17\x72\x3e\xce\x2c\x8c\x30\x92\x4e\x3b\x69\x01\x9e\x17\x02\x29\x13\xf9\xcb\x5d\xa6\xc0\x98\x16\x76\x30\x98\x33\x69\x79\x6c\xc2\xf5\xeb\xeb\xbe\x8d\x7e\x65\xf1\xde\xf4\xfd\x86\x98\x3e\x42\x60\x44\x65\x9e\xb4\x32\x32\x74\x13\x72\x9d\x03\xd9\x48\x4d\xb0\x01\x5f\x07\x3c\x5c\xb2\x5e\x4d\x17\x9f\x8e\xc6\xeb\x13\x59\x5d\x37\x39\xdc\xd0\xf4\x60\x7a\xc4\xad\x26\x1e\xde\xa3\xbd\x99\xff\x4c\xa8\x3a\x6a\xc0\x22\x49\x93\xd5\x25\x0c\xaf\x64\x74\xef\x1a\x33\x5d\x52\x28\xb2\x67\x0d\x69\x04\x1f\x39\xdd\x75\xae\x30\x60\xca\xa2\x50\xda\xa5\xc5\x82\xc5\x37\x83\x52\xd2\x3f\x94\x0c\xfd\x74\x37\x0d\x03\x7d\xf2\x56\x29\xb8\x1d\x9f\xad\xa6\x14\x36\x34\x43\x59\x92\x70\xcf\x67\x18\xa3\x44\xcd\xac\x43\x60\x33\x95\x98\x06\x1b\xc9\x74\xfe\x23\x44\x2f\x3f\x33\x22\x08\x1c\x1c\xc1\x19\x29\x24\x12\xd7\xba\xd9\xd4\x7c\x2e\xe1\x97\x6f\xbe\x71\xfd\xc9\xb9\xaf\x94\x82\x54\x29\x38\x86\x30\x0c\x7f\xf4\x9f\x91\x50\x26\xab\xfa\x37\x26\xab\x90\xc4\xbd\xd2\x2a\xdf\x49\x95\xda\xad\x3f\x0f\xc3\xd0\xff\xc0\x53\xd8\xa1\x4e\x97\x4e\xd5\x85\xda\x89\xca\xfd\xfd\xc3\x1f\xa8\xeb\x2e\xfc\xe5\xfb\xb4\xba\xdf\xb5\xa1\x1e\x3e\x00\xf5\x77\x36\x61\x8f\xc1\x0a\xc7\x6e\xad\x21\x01\xf7\x62\xe4\x66\xe7\x95\x52\x61\x2c\x98\x31\x6d\x74\x5e\x2c\xf5\xf0\x28\x5a\xbd\x7e\x6c\xc1\x86\x06\xf7\x77\x0f\xe0\x3e\xab\x6c\xa6\xe4\x14\xb9\x17\xff\x4a\xa9\x9d\x30\xa4\xbc\x55\xfb\xd5\xa3\xde\xd9\x9d\x77\xb4\x33\x60\x11\x3f\x35\x9f\x7a\xf8\x2f\x5e\xbe\xff\xe5\xfc\xf4\xec\xe2\xdd\xf9\xee\x51\x63\xc1\x2c\x02\xad\xf1\xb5\x84\x16\xf0\xef\x1f\x00\xfe\xab\x6a\x30\x3b\xd0\x47\xc7\xe0\xa3\x59\x8c\xc2\x57\x4a\xfd\x15\x86\xe1\x5d\xdd\xcc\x64\xb5\x47\x0b\x13\xf5\x29\x7c\x2a\x7f\xc3\xb4\xc9\x98\x20\x9b\x5a\x18\xa6\x46\x2c\x95\xd8\x88\xe3\x69\x47\xd8\xa5\xcc\x67\xe2\x9c\x32\x17\x58\xd7\xeb\x7f\x8e\x41\x72\x31\x0b\x5f\x4b\x87\x8b\x13\xd5\x4d\xce\xb6\x66\xba\x34\xeb\x38\x8c\x2a\x28\xba\x13\xf7\x96\x0b\x41\x0d\xf5\x4d\x50\x4a\xf7\x91\x7c\xbe\x24\xa3\x0f\xa8\xb4\x0b\x5d\x03\x2d\x50\xcf\xa9\x7e\x98\x66\x0b\xca\x24\xe4\x55\xfa\xc0\x7b\x36\x92\xd3\xd9\x2a\x45\xd5\xd4\x3b\x0b\xf5\xe1\x74\xc1\x03\x96\x5a\xf4\x6b\x81\x2b\x3b\x9f\x0f\x9e\x47\xb2\x4e\x15\x8d\x0a\x5f\x45\x61\x1d\xcd\x28\x48\x95\x0a\x47\x4c\x3b\x74\x9f\x07\x55\xf8\x25\x0a\xbc\x3d\xbe\xf8\xf0\x85\x91\x13\x1e\x05\xae\xd5\xd1\x21\x92\xbf\xbf\x7f\xf7\x36\x92\xc7\xc7\xc7\xc7\xde\x5b\xf4\xfb\xac\x90\xf5\xeb\x8b\x22\xd2\x81\x4f\xb7\xbe\x4e\x29\x4d\x9d\x1f\x35\x8e\x4b\xc1\x74\x24\x17\x87\x50\x73\x82\xb3\xa4\xb9\x07\x98\x8f\x30\x49\x66\xe9\x73\xaf\xce\xbe\x32\x92\xad\x1c\x97\x3a\xc0\xd7\x3f\x11\xe4\xeb\xba\x44\x9c\x26\xf9\xb6\x0b\xc2\x86\xcc\x47\x0d\x55\xc9\xd9\xc4\xdf\x59\x9d\x95\x72\x81\xf5\xc4\x6d\xc8\x7d\x86\xda\x28\x39\xe3\x4c\xbd\x21\x48\xb9\x36\x76\xe8\x3c\x74\x0c\x07\x3f\x76\x5a\x29\x0e\x4d\xe3\xe1\x5c\x26\x00\x98\x89\x8a\x02\x87\x3a\x0a\x8e\x20\x0a\x96\xf1\x66\x1e\x58\xe8\xa1\x44\xc1\xde\x4c\x80\x83\xf1\x96\xe5\x5e\x48\xb9\xbf\xff\x5d\xec\x21\xb8\x9f\xb1\xd5\x93\x20\xf5\x77\x6c\x41\x3c\x4d\xeb\xb2\x62\xde\xfb\xde\x8f\xdc\xc0\x2d\x0a\xf1\xed\x8d\x54\xb7\xd2\xf1\x36\x63\x86\x76\x16\xa5\xb1\x2a\x07\x4f\x8f\xf9\xe0\xee\xf9\x85\xb2\x13\x71\x3f\x79\x5a\x6a\x28\xa4\x72\x0c\xcc\x07\x34\x92\xd7\x8e\x3a\x4d\x44\x33\x25\x12\x1f\xce\x96\x26\xb7\xa9\xa9\x99\x00\xf5\xce\xa3\x26\x42\x24\x9d\x98\x69\xcc\x61\x87\xf8\xdf\x98\xb2\x50\x59\x37\x9b\xa7\xab\x8f\x57\xbb\x47\x9b\xc4\x69\x5e\xdc\x5c\xa8\x9c\x3d\x5e\xc6\x41\x78\x78\x70\x68\xa2\xa0\xf6\x7a\x30\xb7\xc5\x9e\xbb\xd4\xbd\xc9\x17\x50\x1d\x01\xcb\xaa\xb7\xa5\x65\x5f\xac\x92\xde\xaa\x6f\xfd\x4b\xa1\xb5\xef\xd7\x3b\x8f\xb1\x8c\x8b\xad\x7d\x85\xd8\x3e\xd3\x58\xe1\x8c\x6b\x72\xf0\x72\xf1\x2b\xbe\xff\xe8\xd7\x84\xf3\x8f\x84\xd6\x39\x11\x5a\x78\xc7\xb3\x8e\x10\xd3\x7b\x8c\xb3\xf2\xb7\x81\x3d\x8e\xee\x7f\xe0\xb6\x81\xe7\xf3\x7b\x68\x7e\x2f\x1b\x55\xce\x78\xef\x37\x2c\x8f\x27\x63\x9f\xae\xbe\x4b\x69\x1a\xc7\x6b\xde\x29\x35\x9f\xcc\x90\xe9\xbf\x01\x72\x82\x85\x50\x15\xed\x3c\xd7\x24\xe8\x68\xe1\xc9\x05\xf4\xcf\xe3\x07\x1f\x6e\x2c\x55\xa1\x16\x2e\x60\xaf\xa3\xa2\xb9\xc6\xbd\x54\x45\xb9\x2c\xf1\xad\xa8\xc0\xdf\xe9\xeb\x99\xc5\x0b\xf7\x54\xd7\xd1\x30\xbd\xee\xba\x54\x49\x6a\x86\xf5\x6d\xf8\x0d\xd5\xcc\x5f\xce\x5f\x7e\x74\xef\xdf\xaa\x3c\x91\xc2\x25\x2f\x5f\x7a\xdd\xb8\xc5\x0b\xb1\x8f\xbf\x44\xbf\xd2\x1a\xd4\x7d\xbd\xb6\x41\x42\x54\x9b\x5e\x37\x59\x7e\x6f\xed\x34\x85\xe9\x93\x41\x77\x71\xed\xdd\xbf\xee\xbd\x35\x3f\xe4\x4b\xef\x81\xde\xef\xda\x07\xae\x93\xde\x7f\x43\xb0\xdd\xb3\xcf\xe1\xb3\x47\xf0\x18\x97\xf5\xcb\x16\xff\x76\x6e\xea\x6f\x56\xda\x0c\xa5\xad\x8f\x59\xe7\xde\xd6\x05\xaa\x40\x39\xf7\x90\xb7\x7e\x77\x5f\xff\x7e\x35\x55\xe2\x5f\xb9\xe3\x67\x8b\x5a\x32\xf1\x42\xc5\xad\xd7\x75\xdd\x23\x34\xa5\xb1\x7e\xa9\xb9\xf8\xc7\x05\x94\x6c\xff\x71\x81\x07\xff\x1e\x80\x7f\x4e\xfa\xad\x7b\xfb\xf7\xad\x29\x30\x26\x64\x77\xcf\xee\x9e\xfd\x3b\x00\x00\xff\xff\x02\x2b\x79\x17\xe7\x40\x00\x00")

func minioadminV1ApiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_minioadminV1ApiSwaggerJson,
		"minioadmin/v1/api.swagger.json",
	)
}

func minioadminV1ApiSwaggerJson() (*asset, error) {
	bytes, err := minioadminV1ApiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "minioadmin/v1/api.swagger.json", size: 16615, mode: os.FileMode(420), modTime: time.Unix(1603333326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"minioadmin/v1/api.swagger.json": minioadminV1ApiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"minioadmin": &bintree{nil, map[string]*bintree{
		"v1": &bintree{nil, map[string]*bintree{
			"api.swagger.json": &bintree{minioadminV1ApiSwaggerJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
