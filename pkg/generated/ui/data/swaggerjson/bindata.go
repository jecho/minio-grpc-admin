// Code generated by go-bindata.
// sources:
// assets/generated/swagger/minioadmin/v1/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _minioadminV1ApiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x59\x51\x73\xdc\x36\xee\x7f\xcf\xa7\xc0\x5f\xff\x9b\x89\x7d\xdd\x6a\x6d\xf7\xe6\x1e\xdc\xf1\x4c\x3d\x4d\xd2\xba\x97\xb6\x1e\xd7\x6e\x1f\x22\x8f\x0d\x49\x90\xc4\x86\x22\x55\x92\x5a\x47\xcd\xf8\xbb\xdf\x80\xa4\x56\xda\xf5\xda\xc9\xc5\x4f\xf6\x8a\x20\xf0\x03\xf0\x23\x00\x51\x1f\x5f\x00\x24\xf6\x0e\xeb\x9a\x4c\x72\x0c\xc9\x51\x7a\x90\x2c\xf8\x99\x50\x95\x4e\x8e\x81\xd7\x01\x12\x27\x9c\x24\x5e\xff\x59\x28\xa1\xe1\xb4\x6c\x85\x12\xd6\x19\x74\x62\x45\x70\x7a\x7e\xe6\x37\x01\x24\x2b\x32\x56\x68\xc5\xa2\xab\x83\xf4\x30\x6a\x03\x48\x0a\xad\x1c\x16\x6e\xad\x12\x20\x51\xd8\x46\x9d\x45\x83\x24\xe1\x77\x52\xf4\xb7\xc0\xb8\x03\x20\xe9\x8d\xe4\xf5\xc6\xb9\xce\x1e\x2f\x97\xb5\x70\x4d\x9f\xa7\x85\x6e\x97\xab\x6d\x51\x6a\x51\x78\xe1\x36\x2e\x7d\x57\xf3\x13\x16\x4e\xbc\xcc\xfd\x0b\x80\x7b\xef\x99\x2d\x1a\x6a\xc9\x26\xc7\xf0\x2e\x40\x63\xfd\x23\x4c\x6f\x8b\x77\x5c\x7b\xd9\x42\x2b\xdb\x6f\x08\x63\xd7\x49\x51\xa0\x13\x5a\x2d\xff\xb4\x5a\x4d\xb2\x9d\xd1\x65\x5f\x7c\xa6\x2c\xba\xc6\x4e\xe1\x5d\x62\x27\x96\x1c\x52\x8d\x1c\xd9\xe5\xea\x70\x39\x05\x72\x1d\xaf\x9a\xe6\xe1\x63\x4f\xfa\xb6\x45\x33\xb0\xdb\x7f\x08\x29\xc1\x90\xeb\x8d\x82\xb8\x15\x38\x85\xa6\xf5\xe6\x01\x73\xdd\x3b\xc0\x4e\x80\x25\xb3\x22\xb3\x8e\x1c\x40\xa2\x3b\x32\x5e\xea\xac\xf4\x11\x5c\xe3\xb8\xf9\x81\xdc\xef\x41\xd9\xd9\xa4\x6b\xbe\xd5\x90\xed\xb4\xb2\x64\x37\x80\x01\x24\x47\x07\x07\x5b\x8f\x00\x92\x92\x6c\x61\x44\xe7\x22\x41\x4e\xc1\xf6\x45\x41\xd6\x56\x3d\x63\x0f\x9a\xd2\x99\xfa\xe0\x24\xa7\x0b\x1f\x28\x03\x48\xfe\x61\xa8\x62\x3d\xff\xbf\x2c\xa9\x12\x4a\xb0\x5e\xbb\x5c\x1d\x4e\xa8\x2f\xa8\x93\x43\xb2\xb1\xef\x7e\xf6\xeb\x7e\x6e\x2a\x29\xa9\xc2\x5e\xba\x4f\xc3\x56\xd0\x2b\xfa\xd0\x51\xe1\xa8\x04\x32\x46\x9b\x35\xfa\xe7\x82\x37\xbd\x72\xa2\xa5\xd7\xac\xf4\x09\xdc\x2f\x76\x78\x90\x38\xac\x27\xee\xc5\x67\x53\x2e\x27\x6d\xd7\x2f\xe6\x5a\xa6\x73\x31\xc3\x31\x31\x73\x2b\x96\x3b\xd8\x30\x23\xa8\x1b\x3a\x7f\xa0\x75\xfe\x27\x15\x6e\x3a\x9c\x9d\x61\x8a\x39\xb1\x45\x93\xa4\x16\xee\xe6\x21\xcf\x37\x54\x59\x67\x84\xaa\x37\xc2\x3a\x15\xa3\xcb\x86\xc0\x61\x0d\x5a\x81\x6b\x08\x6a\xe1\xc0\x50\xa7\xad\x70\xda\xcc\xd2\x3e\x0f\x12\x9b\x2c\x74\xdb\x8a\xed\x3c\x7f\xbe\xc5\x06\x6d\x03\xba\x5a\x9b\x8c\xea\x1e\x35\xe7\x0c\xd1\x8d\x75\xe8\xe8\x8b\x4c\xfe\xd1\x90\x6b\xc8\x80\x36\xa0\xb4\xf3\x56\x59\x23\xdc\xa1\x85\x42\x12\x2a\xb8\x6b\x48\x41\xde\x0b\xf9\x08\x08\x5e\x2a\x6f\xca\x2f\x05\xf0\x0a\x1d\xb1\xbf\x5e\xcd\x23\x6e\xea\x67\xe5\x31\xb2\x8a\x8d\xd4\x1a\x7a\x4b\x25\x38\xcd\x71\xed\x84\xa4\xdd\x16\xe3\xa2\xf9\x22\x7b\xdf\xc7\xcd\xde\xd4\x6e\xfd\x9d\x44\xc7\x1c\xff\x22\xfd\xe7\x71\x33\x08\x17\xd2\x14\xec\x95\x50\x69\x03\x4b\x30\xbd\x52\x42\x31\x6d\x67\xb6\x37\x0f\x65\xec\x46\x9d\xd1\x4e\xe7\x7d\x75\xaa\x86\xe7\x9c\x33\x96\xbf\x09\xcd\xf4\xb3\x9d\x79\x50\xab\xaf\x2e\xde\x2e\x0d\x59\xdd\x9b\x82\x80\x5b\x37\xb8\x06\x1d\xf4\x4a\xfc\xd5\x93\x1c\x40\x94\xa4\x9c\xa8\x04\xd9\xc0\xd1\xa1\xa3\xf1\x94\x58\x32\x02\xa5\xf8\x9b\xca\x4c\x79\x97\x0a\x2d\x21\xef\xab\x8a\x0c\xb4\x64\x2d\xd6\x94\xc2\x65\x23\x2c\x04\x24\xd0\xf6\x96\xcf\x95\x72\x28\x14\xa0\x03\x49\x68\x5d\xa6\xb4\x22\xc8\x92\x65\x96\x40\xd1\xa0\xc1\xc2\x91\xe1\x7d\x04\x12\xad\x03\x4b\x75\x4b\xca\x8d\x46\xaf\x2e\xde\xbe\xb4\xc0\x8d\x36\xa8\x33\xd4\x19\xb2\xa4\x5c\xa6\x78\xb9\xea\xa5\x1c\xe0\xaf\x1e\x25\x63\x2e\x83\x47\x71\xab\xc7\xbe\x87\x16\x84\xca\xd4\x2d\xab\x58\xd6\x5a\xd7\x92\xd2\x31\x21\xe9\xab\x3e\xb4\xcc\xdb\xfd\x80\xc0\x6f\xb7\x8d\xee\x65\x09\x39\x01\xc3\x86\x02\x95\x56\xa2\x40\xc9\x79\x6f\x33\xb5\x47\x69\x9d\x2e\xd8\x99\x92\x9d\xcc\x92\x34\x4b\x40\x58\x7f\xac\xb1\x28\xa8\x73\x54\xee\xa7\x99\xca\xd4\x99\x82\x8e\xfd\x13\x05\x2d\xc0\x11\xb6\x16\x7a\xdb\x23\x23\xee\x0c\x45\x3a\x81\x50\x4e\x7b\xbc\xb9\x50\x68\x06\x40\x29\x3d\x74\x1b\x32\xe3\x1a\x1a\xb2\xd8\xa8\x98\x89\xce\x1f\x2d\x86\xc6\x7b\x38\xba\xf4\xc1\x47\xeb\x54\x0d\x29\xfc\xa8\xef\x68\x45\x66\xe1\x39\x7a\x75\xf1\xd6\xc2\x5d\x23\x8a\xc6\x6f\x71\x0d\x65\x2a\x8c\x4d\x70\xcb\x13\xd2\xed\x22\xfc\xb5\xb7\x8b\x50\x97\x20\xac\x2e\x80\x53\x54\xa0\x02\xed\x99\xe3\x11\x5b\x72\xd0\x77\x80\x1e\x5b\xa6\xc2\xfc\x11\x20\xb6\xd8\xd9\x10\x6d\x6f\xd1\xe9\x91\x0e\x30\x6b\x46\x80\x16\x2a\x2d\xa5\xbe\xb3\xc7\x1c\x9c\x7f\xc2\x59\x35\x99\xe4\x00\x76\x46\xaf\x44\x49\xe5\x1a\x15\x3f\x44\xcb\x93\x5b\x99\xf2\x86\x53\x05\x3f\x5e\x5e\x9e\xc3\x0f\xaf\x2f\xc7\x66\x71\x75\xf1\x36\xf0\x62\x10\x24\x4b\x40\x78\xb7\x9d\xe2\xcb\xa1\xa3\xeb\x77\xd7\x99\x02\x58\xa1\xec\x7d\xe4\x62\xa4\x43\xf7\xf3\xbe\xc7\xa9\x0f\x50\x85\x51\x20\xd8\x9b\x06\x3f\x0b\x68\x88\x53\xa3\xef\x62\x59\xc3\x82\x19\xab\xf5\xfb\xbe\xe3\xb9\xa1\x97\xce\x42\x8e\x5c\xf4\x02\x34\x36\x78\x75\xf1\xd6\x6b\x6f\x70\xe5\xc3\xdf\xce\xf2\x5e\x86\xc4\xe3\x08\x86\xff\x5f\x69\x51\x02\xaa\x81\xf7\x06\xd5\x9e\x96\x86\x2a\x6d\x68\x31\x4a\xb2\x02\x74\x22\x17\x52\xb8\x01\x14\x51\xe9\x63\x9e\x13\xf8\xa3\x61\x56\x7c\x40\x81\x61\x14\x0d\xaa\x9a\xfc\xaa\x67\x54\x0a\x7b\x57\x96\xc6\xc9\x92\x1d\xe1\xa4\x31\xe9\x43\xd6\x50\x61\xed\x81\xe7\x86\xf0\x3d\xb3\x3b\x6a\x48\xf7\x39\x65\xbf\x68\x47\xc7\xe0\xf8\x84\x57\xbd\x2a\x02\x35\x18\x43\x64\x7f\xd1\x1b\x43\xca\xc9\x01\x70\x85\x42\x62\x2e\xd7\x3c\xd5\x55\x25\x0a\x81\x32\x56\x8e\xbc\xaf\xc0\x10\xd7\x03\x5a\x00\xaa\x92\x89\x1d\x95\xf8\xbe\xc1\xec\x9d\x08\x95\x53\x2d\x42\xad\xbd\x13\xae\xc9\x14\xaf\xa4\x21\xcf\xd8\x09\xcb\x6f\x07\xfe\xbc\xfd\x16\x5e\x09\x40\xfb\x4e\xeb\x1a\x54\xdb\x3c\x87\x3d\x56\xdc\x10\x50\xdb\xb9\x21\x72\x6f\x1f\x5a\x51\x37\x0e\x72\xca\x94\xb7\xce\x56\x40\xb4\x9d\x24\xae\x44\x61\xf2\xb6\x1d\x15\xa2\x12\x05\x58\x6a\x51\x39\x51\xd8\x74\x77\xcb\xf1\x24\xfb\x5f\x4a\x74\x60\x21\xaf\xe6\x83\xa3\x27\xcb\xf7\xcf\xcc\xf4\x9c\x00\x99\xca\xa2\x9c\x55\x64\xd8\x2e\xc8\xb1\x06\x62\xae\x57\x34\x82\x8f\x09\x4f\x77\xf4\xab\x75\xf3\xd9\xb2\x78\x7b\xaa\x86\xdb\xb1\x86\x5b\x3e\x1e\x68\x72\xe1\x0c\xf3\xf0\x09\xeb\xe3\xf9\x47\xa9\x63\xd6\x00\x33\xc5\x87\xd5\x17\x8c\x60\x24\x7f\xb2\xc7\xac\x5b\x0a\x67\xf6\x7c\x24\x8d\x14\xb9\xb7\x1d\x6b\x85\x05\xdb\x77\x9d\x36\xbe\x2c\x76\x58\xbc\x5f\xf6\x8a\xff\x70\x31\x0c\xc7\xdd\x8e\x0c\x0c\xc5\x5b\x57\xd0\xbb\x70\x70\x46\x0a\x5b\x3e\xa1\x58\x96\x22\xf0\x19\x6a\x52\xfc\x22\xe5\x11\xb8\x46\x97\x76\xc4\xc6\x3a\x7d\xfc\x18\xd1\xeb\x0f\xc8\x04\x81\xc3\x63\x38\x67\x83\x4c\xe2\x68\x1b\xd7\xee\x0b\x05\xdf\x7f\xf5\x95\x97\xe7\xe0\xbe\xd1\x1a\x2a\xad\xe1\x04\xd2\x34\xfd\x36\x3c\x63\xa5\xa8\x86\xf8\x0b\xd5\x90\xb2\xba\x37\x46\xb7\x7b\x95\xd6\xfb\xf1\x79\x9a\xa6\xe1\x1f\x51\xc1\x1e\x0b\x5d\x79\x53\x97\x7a\x2f\xeb\x0f\x0e\x8e\xfe\xcd\xa2\xfb\xf0\x31\xc8\xcc\xc4\xef\xe7\x50\x8f\x3e\x01\xf5\x27\x5c\xe1\xe7\x60\x85\x13\xdf\x6b\x58\xc1\x93\x18\x85\xdd\x7b\xa3\x75\x5a\x48\xb4\x76\x8e\x2e\xa8\x65\x89\x80\x62\x26\xf5\xed\x0c\x36\x8c\xb8\xbf\xf9\x04\xee\xf3\xc1\x35\x5a\xad\x91\x07\xf5\x6f\xb4\xde\x4b\x53\xae\x5b\x31\xae\x01\xf5\xde\xfe\x66\xa0\xbd\x03\x0f\xf1\xf3\xf2\x59\x80\xff\xea\xf5\x6f\xdf\x5f\x9c\x9d\x5f\xfe\x7a\xb1\x7f\x3c\x7a\x30\x65\x60\xb6\x3f\x6a\x98\x01\xff\xd7\x27\x80\xff\xa0\x47\xcc\x1e\xf4\xf1\x09\x84\x6c\x76\x79\xfa\x46\xeb\x8f\x69\x9a\xde\xc7\x65\x54\xc3\x82\x1b\x13\xcb\x74\xa1\x94\xff\x8c\xc6\x36\x28\xd9\xa7\x19\x86\xb5\x13\x3b\x35\x8e\xea\x44\xb5\xa5\xec\x4a\xb5\x93\x3a\x6f\xcc\x27\xd6\x4b\xfd\xdf\x09\x28\x21\xa7\xf4\xcd\x6c\xf8\x3c\xf1\xdc\xe4\x7d\x1b\x8f\xcb\xd8\xc7\x21\x1f\xa0\xdb\x3e\xb8\x77\x42\x4a\x5e\x88\xaf\xe9\x5c\xee\x33\xf5\x72\x47\x45\x5f\xf2\x68\x97\xfa\x05\x6e\x50\x2f\x79\x7e\x58\x57\x0b\xae\x24\x1c\x55\x7e\x10\x22\x9b\xa9\xf5\x69\x55\x72\x18\xe7\x9d\x07\xf3\xe1\xba\xe1\x01\x56\x8e\x42\x2f\xf0\x63\xe7\xcb\xe5\xcb\x4c\xc5\x52\x31\x9a\x08\x53\x14\xc5\x6c\x66\x49\xa5\x75\x9a\xa3\xf1\xe8\x3e\x2c\x87\xf4\xef\x2c\x09\xfe\x84\xe1\x23\x0c\x46\x5e\x79\x96\xf8\x55\x4f\x87\x4c\xfd\xf4\xdb\xaf\xbf\x64\xea\xe4\xe4\xe4\x24\x44\x8b\x7f\x4f\x83\x6c\xe8\x2f\x9a\x49\x07\xa1\xdc\x86\x39\xa5\xb7\xb1\x3e\x1a\xaa\x7b\x89\x26\x53\x0f\xb7\xf0\x72\x49\x53\xd1\x5c\x00\xb5\x39\x95\xe5\x54\x3e\x17\xb1\xfa\xaa\x4c\xcd\x6a\x5c\xe5\x01\xdf\x7e\xc7\x90\x6f\xe3\x88\xb8\x2e\xf2\xf3\x10\xa4\x23\x99\x8f\x47\xaa\x72\xb0\x99\xbf\xd3\x9c\x55\x09\x49\xf1\xe0\x8e\xe4\x3e\x27\x63\xb5\x9a\x38\x13\x5f\x08\x2a\x61\xac\xbb\xf1\x11\x3a\x81\xc3\x6f\xb7\x56\x39\x0f\xe3\xe2\xd1\x46\x25\x00\x98\x54\x65\x89\x47\x9d\x25\xc7\x90\x25\xbb\x78\xb3\x09\x2c\x0d\x50\xb2\x64\x31\x29\xf0\x30\x7e\xc1\x36\x28\xe9\x0f\x0e\xbe\x29\x02\x04\xff\x3f\xcd\x24\x19\xd2\xe3\x82\x33\x88\x67\x55\x1c\x2b\x36\xa3\x1f\xe2\x28\x2c\xdc\x91\x94\x5f\xbf\x57\xfa\x4e\x79\xde\x36\x68\xf9\xcd\xa2\xb7\x4e\xb7\x10\xe8\xb1\x99\xdc\x45\x68\x94\x5b\x19\x0f\x87\x67\x66\x86\x53\xaa\x6a\xc0\x90\xd0\x4c\xdd\x7a\xea\x8c\x19\x6d\xb4\x2c\x43\x3a\x67\x96\xfc\x4b\x4d\x64\x02\xc4\x37\x8f\x48\x84\x4c\x79\x35\xeb\x9c\xc3\x1e\xf3\x7f\x74\xe5\xc1\x64\x3d\xbe\x3c\x5d\xbf\xbb\xde\x3f\x7e\x4e\x9e\x36\xd5\x6d\xa4\xca\xfb\x13\x74\x1c\xa6\x47\x87\x47\x36\x4b\x62\xd4\x93\x8d\x57\xec\x8d\x1b\xb7\x67\xbc\x63\xd3\x96\x82\x5d\xd3\xdb\x23\x37\x19\xe5\xa3\x53\x9f\x50\x8e\xea\x8d\xcb\xda\x8d\xb1\x4f\x28\xf7\xcd\xd1\x6e\xad\x31\xf6\x5f\x02\xa8\x24\x87\x42\x3e\xb8\xd1\x1d\xb7\xa2\x31\x38\x6c\x22\x12\x8e\xda\x6d\xf9\x47\xaf\x38\xe7\x77\x1a\xbb\xef\x34\x77\x5e\x85\x3c\xbc\xd6\x7d\x46\xb2\xf4\xfb\xc7\xbc\xcb\xb5\x96\x84\xea\xd1\x41\x7b\xd7\xf2\xfa\xde\xe7\xac\x82\xf5\x5d\xba\xbf\xf8\xf9\xf5\x3f\x8f\x8c\xfa\xc1\x8f\x1b\xb1\xf3\x1e\xf5\x89\xe0\x7d\xfa\x3a\xf6\xe9\x1b\xb6\xb9\xe4\x63\x01\x9f\x3e\x94\x50\xd1\x1b\xe1\x86\xf5\xa5\xf2\x3a\xde\xd8\xbb\x86\xf8\x5d\x66\x84\xfe\x6e\xe3\x6b\x82\x12\xe5\xfc\x23\x41\xf8\x36\x13\x7f\x5f\xaf\x8d\x84\x2f\x21\xf4\xc1\x91\x51\x28\x5f\xe9\x62\x76\xed\xbc\xfd\xfa\xa2\x0d\xc5\x4f\x18\x0f\x3f\x40\x69\x35\xff\x00\xf5\xc9\x6f\x46\xe1\x3b\xcb\xd7\xfe\x52\xfc\x6b\x7e\xbf\x61\x64\xf7\x2f\xee\x5f\xfc\x37\x00\x00\xff\xff\x51\x4c\x39\x1f\x0b\x1b\x00\x00")

func minioadminV1ApiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_minioadminV1ApiSwaggerJson,
		"minioadmin/v1/api.swagger.json",
	)
}

func minioadminV1ApiSwaggerJson() (*asset, error) {
	bytes, err := minioadminV1ApiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "minioadmin/v1/api.swagger.json", size: 6923, mode: os.FileMode(420), modTime: time.Unix(1602808239, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"minioadmin/v1/api.swagger.json": minioadminV1ApiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"minioadmin": &bintree{nil, map[string]*bintree{
		"v1": &bintree{nil, map[string]*bintree{
			"api.swagger.json": &bintree{minioadminV1ApiSwaggerJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
